/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/orgs/{name}/campaigns": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List the campaigns for an organization */
    get: operations["CampaignController_listCampaigns_v1"];
    put?: never;
    /** Create a new campaign for an organization */
    post: operations["CampaignController_createCampaign_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/campaigns/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a campaign */
    get: operations["CampaignController_getCampaign_v1"];
    put?: never;
    post?: never;
    /** Delete a campaign */
    delete: operations["CampaignController_deleteCampaign_v1"];
    options?: never;
    head?: never;
    /** Update a campaign */
    patch: operations["CampaignController_updateCampaign_v1"];
    trace?: never;
  };
  "/v1/campaigns/{id}/schedule": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Schedule a date & time to publish a campaign */
    put: operations["CampaignController_scheduleCampaign_v1"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/campaigns/{id}/status": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Update the status of a campaign */
    put: operations["CampaignController_updateCampaignStatus_v1"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/campaigns/{id}/tags": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Update the tags for a campaign */
    put: operations["CampaignController_updateCampaignTags_v1"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/orgs/{name}/content": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List content for an org */
    get: operations["ContentController_listContentByOrgId_v1"];
    put?: never;
    /** Create content for an org */
    post: operations["ContentController_createContent_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/content/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a content container */
    get: operations["ContentController_getContent_v1"];
    put?: never;
    post?: never;
    /** Delete a content container */
    delete: operations["ContentController_deleteContent_v1"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/content/{id}/tags": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Set the tags for a content container */
    put: operations["ContentController_setContentTags_v1"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/campaigns/{id}/forms": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List the forms for a campaign */
    get: operations["FormController_listForms_v1"];
    put?: never;
    /** Create a form */
    post: operations["FormController_createForm_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/forms/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a form */
    get: operations["FormController_getForm_v1"];
    put?: never;
    post?: never;
    /**
     * Delete a form
     * @description Deletes a form and all associated form submissions and content.
     */
    delete: operations["FormController_deleteForm_v1"];
    options?: never;
    head?: never;
    /** Update a form */
    patch: operations["FormController_updateForm_v1"];
    trace?: never;
  };
  "/v1/forms/{id}/fields": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create a form field */
    post: operations["FormController_createField_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/forms/{id}/fields/aggregate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List fields and the first page of their aggregated values */
    get: operations["FormController_aggregateFields_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/forms/{id}/bulk/fields": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Bulk create form fields */
    post: operations["FormController_bulkCreateFields_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/form-fields/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete a form field */
    delete: operations["FormController_deleteField_v1"];
    options?: never;
    head?: never;
    /** Update a form field */
    patch: operations["FormController_updateField_v1"];
    trace?: never;
  };
  "/v1/bulk/form-fields": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Bulk update form fields */
    patch: operations["FormController_bulkUpdateFields_v1"];
    trace?: never;
  };
  "/v1/bulk/form-fields/delete": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Bulk delete form fields */
    post: operations["FormController_bulkDeleteFields_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/forms/{id}/submissions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List submissions to a form */
    get: operations["FormSubmissionController_listSubmissions_v1"];
    put?: never;
    /** Create a form submission */
    post: operations["FormSubmissionController_createSubmission_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/form-submissions/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete a form submission */
    delete: operations["FormSubmissionController_deleteSubmission_v1"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/bulk/form-submissions/delete": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Bulk delete form submissions */
    post: operations["FormSubmissionController_bulkDeleteSubmissions_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/forms/{id}/logs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List submission logs */
    get: operations["FormSubmissionController_listSubmissionLogs_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/form-submissions/{id}/review": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Review a form submission */
    post: operations["FormSubmissionController_reviewSubmission_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get the current user's information */
    get: operations["MeController_getMe_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/orgs/{name}/tags": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List the tags used by an organization */
    get: operations["OrgController_listTags_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/campaigns/{id}/verification": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create a verification token as part of a campaign submission. */
    post: operations["VerificationController_createTokenForCampaignEntry_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/verification/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create a JWT for a verification token
     * @description Once the token is verified, a JWT is created and returned, and the token is consumed. Use the JWT to submit a campaign entry that has a field that needs to be verified.
     */
    post: operations["VerificationController_verifyToken_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    User: {
      /**
       * @description The ID of the user.
       * @example abcdefghijklmnopqrst
       */
      id: string;
      /**
       * @description The name of the user.
       * @example john_doe
       */
      name: string;
      /**
       * @description The email of the user.
       * @example john_doe@example.com
       */
      email: string;
      /**
       * @description The image of the user.
       * @example https://example.com/photo.jpg
       */
      image: string;
    };
    Tag: {
      /**
       * @description The name of the tag
       * @example cats
       */
      name: string;
    };
    Campaign: {
      /**
       * @description The status of the campaign.
       * @example DRAFT
       * @enum {string}
       */
      status: "DRAFT" | "SCHEDULED" | "PUBLISHED" | "CLOSED";
      /**
       * @description The ID of the campaign.
       * @example abcdefghijklmnopqrst
       */
      id: string;
      /**
       * @description The name of the campaign.
       * @example My Campaign
       */
      name: string;
      /**
       * @description The description of the campaign.
       * @example This is a campaign to collect feedback on our new product
       */
      description: string | null;
      /**
       * @description The ID of the organization that created the campaign.
       * @example abcdefghijklmnopqrst
       */
      orgId: string;
      /**
       * Format: date-time
       * @description The date and time the campaign will be or was published `null` if the campaign has not been scheduled or published.
       */
      publishDate: string | null;
      /** @description The user who created the campaign. */
      createdBy: components["schemas"]["User"] | null;
      /**
       * Format: date-time
       * @description The date and time the campaign was created.
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The date and time the campaign was last updated.
       */
      lastUpdatedAt: string;
      /**
       * @description The tags assigned to the campaign.
       * @example [
       *       "Poll",
       *       "Feedback"
       *     ]
       */
      tags: components["schemas"]["Tag"][];
    };
    ListCampaignsResponse: {
      data: components["schemas"]["Campaign"][];
      metadata: {
        pageSize: number;
        nextCursor: string | null;
        nextLink: string | null;
      };
    };
    CreateCampaign: {
      /**
       * @description The name of the campaign.
       * @example My Campaign
       */
      name: string;
      /**
       * @description The description of the campaign.
       * @example This is a campaign to collect feedback on our new product
       */
      description?: string | null;
    };
    UpdateCampaign: {
      /**
       * @description The name of the campaign.
       * @example My Campaign
       */
      name?: string;
      /**
       * @description The description of the campaign.
       * @example This is a campaign to collect feedback on our new product
       */
      description?: string | null;
    };
    ScheduleCampaign: {
      /**
       * Format: date-time
       * @description Scheduled date & time to publish the campaign on.
       */
      publishDate: string;
    };
    UpdateCampaignStatus: {
      /**
       * @description The new status to set the campaign to
       * @example PUBLISHED
       * @enum {string}
       */
      status: "DRAFT" | "PUBLISHED" | "CLOSED";
    };
    UpdateCampaignTags: {
      /**
       * @description The tags to assign to the campaign. If a tag is not in this list, it will be removed from the campaign.
       * @example [
       *       "Poll",
       *       "Feedback"
       *     ]
       */
      tags: string[];
    };
    CreateOrgContent: {
      /**
       * @description The type of content to create
       * @example image/png
       * @enum {string}
       */
      type:
        | "image/jpg"
        | "image/jpeg"
        | "image/png"
        | "image/gif"
        | "image/webp"
        | "image/svg+xml"
        | "video/mp4"
        | "video/webm"
        | "video/quicktime"
        | "video/ogg"
        | "text/plain"
        | "text/html"
        | "audio/mpeg"
        | "audio/wav"
        | "audio/ogg"
        | "audio/aac"
        | "audio/webm";
    };
    ContentUpload: {
      /**
       * @description The status of the content
       * @example READY
       * @enum {string}
       */
      status:
        | "WAITING_FOR_UPLOAD"
        | "WAITING_FOR_UPLOAD_THEN_REVIEW"
        | "PENDING_REVIEW"
        | "READY"
        | "DELETED";
      /**
       * @description The primary media type of the content
       * @example VIDEO
       * @enum {string}
       */
      type: "TEXT" | "IMAGE" | "VIDEO" | "AUDIO";
      /**
       * @description The signed URL to upload the content to.
       *
       *     To call this endpoint:
       *     - Use the `PUT` method
       *     - Set the `Content-Type` header to the content type
       *     - Set the body to the content to upload
       * @example https://storage.example.com/upload/abcdefghijklmnopqrst
       */
      url: string;
      /**
       * @description The number of seconds before the upload URL expires.
       * @example 3600
       */
      expiresIn: number;
      /**
       * @description The ID of the content
       * @example abcdefghijklmnopqrst
       */
      id: string;
    };
    ImageMedia: {
      /**
       * @description The type/purpose of the media object
       * @example ORIGINAL
       * @enum {string}
       */
      variant: "ORIGINAL";
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "IMAGE";
      /** @description The URL of the image */
      url: string;
      /** @description The width of the image */
      width: number;
      /** @description The height of the image */
      height: number;
      /** @description The size of the image in bytes */
      size: number;
    };
    VideoMedia: {
      /**
       * @description The variant of the media object
       * @example ORIGINAL
       * @enum {string}
       */
      variant: "ORIGINAL";
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "VIDEO";
      /** @description The duration of the video in seconds */
      duration: number;
      /** @description The width of the video */
      width: number;
      /** @description The height of the video */
      height: number;
      /** @description The size of the video in bytes */
      size: number;
      /** @description The URL of the video */
      url: string;
    };
    AudioMedia: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "AUDIO";
      /** @description The duration of the audio in seconds */
      duration: number;
      /** @description The size of the audio in bytes */
      size: number;
      /** @description The URL of the audio */
      url: string;
    };
    TextMedia: {
      /** @description The text content */
      text: string;
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "TEXT";
    };
    OrgUser: {
      /**
       * @description The role of the user in the org
       * @example ADMIN
       * @enum {string}
       */
      role: "OWNER" | "ADMIN" | "MANAGER";
      /**
       * @description The unique identifier of the org user
       * @example abcdefghijklmnopqrst
       */
      id: string;
      /**
       * @description The name of the org user
       * @example Theo
       */
      name: string;
      /**
       * @description The email of the org user
       * @example theo@example.com
       */
      email: string;
      /**
       * Format: date-time
       * @description The date the user joined the org
       */
      joinedAt: string;
    };
    Content: {
      /**
       * @description The status of the content
       * @example READY
       * @enum {string}
       */
      status:
        | "WAITING_FOR_UPLOAD"
        | "WAITING_FOR_UPLOAD_THEN_REVIEW"
        | "PENDING_REVIEW"
        | "READY"
        | "DELETED";
      /**
       * @description The primary media type of the content
       * @example VIDEO
       * @enum {string}
       */
      type: "TEXT" | "IMAGE" | "VIDEO" | "AUDIO";
      /**
       * @description The default version of the content. May be null if content status is not `READY`.
       * @example {
       *       "type": "VIDEO",
       *       "variant": "ORIGINAL",
       *       "duration": 10,
       *       "width": 1920,
       *       "height": 1080,
       *       "size": 1024,
       *       "url": "https://example.com/original.mp4"
       *     }
       */
      defaultVersion:
        | (
            | components["schemas"]["ImageMedia"]
            | components["schemas"]["VideoMedia"]
            | components["schemas"]["AudioMedia"]
            | components["schemas"]["TextMedia"]
          )
        | null;
      /**
       * @description The ID of the content
       * @example abcdefghijklmnopqrst
       */
      id: string;
      /** @description The tags of the content */
      tags: components["schemas"]["Tag"][];
      /**
       * Format: date-time
       * @description Timestamp of when the content was created
       */
      createdAt: string;
      /** @description The user that created the content */
      createdBy: components["schemas"]["OrgUser"] | null;
    };
    ListContentResponse: {
      data: components["schemas"]["Content"][];
      metadata: {
        pageSize: number;
        nextCursor: string | null;
        nextLink: string | null;
      };
    };
    DeleteContent: {
      /**
       * @description If true, the content will be permanently deleted. Otherwise, it will be soft deleted.
       * @example true
       */
      permanent?: boolean;
    };
    SetContentTags: {
      /**
       * @description The tags to set for the content. Add up to 10 tags at a time, and each tag must be between 1 and 50 characters long.
       * @example [
       *       "tag1",
       *       "tag2"
       *     ]
       */
      tags: string[];
    };
    CreateForm: {
      /** @description The name of the form */
      name: string;
      /** @description The order of the form */
      order?: number;
      /** @description Whether to require manual review of submissions before they are
       *     considered complete */
      reviewSubmissions?: boolean;
    };
    FormTermsSummary: {
      /**
       * @description The ID of the terms document
       * @example fj28amnff23khq8f3hn
       */
      id: string;
      /**
       * @description An audience-facing title for the terms document
       * @example Terms and Conditions
       */
      title: string;
      /**
       * @description The order of the terms document
       * @example 1
       */
      order: number;
    };
    FieldOption: {
      /**
       * @description The value of the field option
       * @example 1
       */
      value: string;
      /**
       * @description An alternate label for the field option
       * @example Option 1
       */
      label: string | null;
      /** @description The content of the field option */
      content: components["schemas"]["Content"] | null;
      /**
       * @description The order of the field option
       * @example 1
       */
      order: number;
    };
    SubmissionContentFieldOptionSource: {
      /**
       * @description The field option source type.
       * @default SUBMISSION_CONTENT
       * @enum {string}
       */
      type: "SUBMISSION_CONTENT";
      /** @description The id of the form to get the content options from. */
      formId: string;
      /** @description The name of the field to get the label from. */
      labelFieldName?: string;
    };
    FormField: {
      /**
       * @description The field type
       * @example TEXT
       * @enum {string}
       */
      type: "CONTENT" | "BOOLEAN" | "EMAIL" | "NUMBER" | "SELECT" | "TEXT";
      /**
       * @description The ID of the form field.
       * @example fj3u2u2fsism74hfuosf
       */
      id: string;
      /**
       * @description The label of the form field.
       * @example Full Name
       */
      label: string | null;
      /** @description A description to describe the purpose of the field. */
      description: string | null;
      /**
       * @description Whether the field is required for a campaign entry.
       * @example true
       */
      required: boolean;
      /**
       * @description Whether the field must be unique across campaign entries.
       * @example true
       */
      unique: boolean;
      /**
       * @description Whether the field must be verified. Requires field type to support verification.
       * @example true
       */
      verify: boolean;
      /**
       * @description The order of the field in the form.
       * @example 1
       */
      order: number;
      /**
       * @description Whether the field allows multiple options to be selected.
       * @example true
       */
      multipleOptions: boolean;
      /**
       * @description The accepted content types of the field.
       * @example [
       *       "image/png",
       *       "image/jpeg"
       *     ]
       */
      acceptedMimeTypes: (
        | "image/jpg"
        | "image/jpeg"
        | "image/png"
        | "image/gif"
        | "image/webp"
        | "image/svg+xml"
        | "video/mp4"
        | "video/webm"
        | "video/quicktime"
        | "video/ogg"
        | "text/plain"
        | "text/html"
        | "audio/mpeg"
        | "audio/wav"
        | "audio/ogg"
        | "audio/aac"
        | "audio/webm"
      )[];
      /** @description The options of the field. */
      options: components["schemas"]["FieldOption"][];
      /** @description The source of the field options. `null` for static options or field types that do not support options. */
      optionSource:
        | components["schemas"]["SubmissionContentFieldOptionSource"]
        | null;
      /**
       * @description The internal name of the field
       * @example fullName
       */
      name: string;
    };
    Form: {
      /** @description The ID of the form */
      id: string;
      /** @description The name of the form */
      name: string;
      /** @description The order of the form */
      order: number;
      /** @description Whether to require manual review of submissions before they are
       *     considered complete */
      reviewSubmissions: boolean;
      /** @description The terms of the form */
      terms: components["schemas"]["FormTermsSummary"][];
      /** @description The fields of the form */
      fields: components["schemas"]["FormField"][];
    };
    UpdateForm: {
      /** @description The name of the form */
      name?: string;
      /** @description The order of the form */
      order?: number;
      /** @description Whether to require manual review of submissions before they are
       *     considered complete */
      reviewSubmissions?: boolean;
    };
    ListFormsResponse: {
      data: components["schemas"]["Form"][];
      metadata: {
        pageSize: number;
        nextCursor: string | null;
        nextLink: string | null;
      };
    };
    StaticFieldOptionSource: {
      /**
       * @description The field option source type.
       * @default STATIC
       * @enum {string}
       */
      type: "STATIC";
    };
    CreateFieldOption: {
      /** @description The id of the content to associate with the field option */
      contentId?: string;
      /**
       * @description The value of the field option
       * @example 1
       */
      value: string;
      /**
       * @description The order of the field option
       * @example 1
       */
      order: number;
    };
    CreateFormField: {
      /**
       * @description The field type
       * @example TEXT
       * @enum {string}
       */
      type: "CONTENT" | "BOOLEAN" | "EMAIL" | "NUMBER" | "SELECT" | "TEXT";
      /** @description The options of the field. */
      options?: components["schemas"]["CreateFieldOption"][];
      /**
       * @description The internal name of the field
       * @example fullName
       */
      name: string;
      /**
       * @description The label of the form field.
       * @example Full Name
       */
      label?: string | null;
      /** @description A description to describe the purpose of the field. */
      description?: string | null;
      /**
       * @description Whether the field is required for a campaign entry.
       * @example true
       */
      required?: boolean;
      /**
       * @description Whether the field must be unique across campaign entries.
       * @example true
       */
      unique?: boolean;
      /**
       * @description Whether the field must be verified. Requires field type to support verification.
       * @example true
       */
      verify?: boolean;
      /**
       * @description The order of the field in the form.
       * @example 1
       */
      order?: number;
      /**
       * @description The accepted content types of the field.
       * @example [
       *       "image/png",
       *       "image/jpeg"
       *     ]
       */
      acceptedMimeTypes?: (
        | "image/jpg"
        | "image/jpeg"
        | "image/png"
        | "image/gif"
        | "image/webp"
        | "image/svg+xml"
        | "video/mp4"
        | "video/webm"
        | "video/quicktime"
        | "video/ogg"
        | "text/plain"
        | "text/html"
        | "audio/mpeg"
        | "audio/wav"
        | "audio/ogg"
        | "audio/aac"
        | "audio/webm"
      )[];
      /**
       * @description Whether the field allows multiple options to be selected.
       * @example true
       */
      multipleOptions?: boolean;
      /** @description The source of the field options. `null` for static options or field types that do not support options. */
      optionSource?:
        | components["schemas"]["SubmissionContentFieldOptionSource"]
        | null;
    };
    FormFieldValueAggregate: {
      /** @description The value of the field */
      value: string;
      /** @description The total count this value was submitted */
      count: number;
    };
    FormFieldAggregate: {
      /**
       * @description The field type
       * @example TEXT
       * @enum {string}
       */
      type: "CONTENT" | "BOOLEAN" | "EMAIL" | "NUMBER" | "SELECT" | "TEXT";
      /** @description The summaries of the field values */
      values: components["schemas"]["FormFieldValueAggregate"][];
      /**
       * @description The label of the form field.
       * @example Full Name
       */
      label: string | null;
      /**
       * @description The internal name of the field
       * @example fullName
       */
      name: string;
      /** @description The options of the field. */
      options: components["schemas"]["FieldOption"][];
    };
    FormAggregateResponse: {
      data: components["schemas"]["FormFieldAggregate"][];
      metadata: {
        pageSize: number;
        nextCursor: string | null;
        nextLink: string | null;
      };
    };
    BulkCreateFormFields: {
      /** @description The fields to create */
      fields: components["schemas"]["CreateFormField"][];
    };
    BulkCreateFormFieldsResponse: {
      /** @description The fields that were created */
      created: components["schemas"]["FormField"][];
      /** @description Any errors that occurred during the update */
      errors: string[];
    };
    UpdateFormField: {
      /**
       * @description The internal name of the field
       * @example fullName
       */
      name?: string;
      /**
       * @description The label of the form field.
       * @example Full Name
       */
      label?: string | null;
      /** @description A description to describe the purpose of the field. */
      description?: string | null;
      /**
       * @description Whether the field is required for a campaign entry.
       * @example true
       */
      required?: boolean;
      /**
       * @description Whether the field must be unique across campaign entries.
       * @example true
       */
      unique?: boolean;
      /**
       * @description Whether the field must be verified. Requires field type to support verification.
       * @example true
       */
      verify?: boolean;
      /**
       * @description The order of the field in the form.
       * @example 1
       */
      order?: number;
      /**
       * @description The accepted content types of the field.
       * @example [
       *       "image/png",
       *       "image/jpeg"
       *     ]
       */
      acceptedMimeTypes?: (
        | "image/jpg"
        | "image/jpeg"
        | "image/png"
        | "image/gif"
        | "image/webp"
        | "image/svg+xml"
        | "video/mp4"
        | "video/webm"
        | "video/quicktime"
        | "video/ogg"
        | "text/plain"
        | "text/html"
        | "audio/mpeg"
        | "audio/wav"
        | "audio/ogg"
        | "audio/aac"
        | "audio/webm"
      )[];
      /**
       * @description Whether the field allows multiple options to be selected.
       * @example true
       */
      multipleOptions?: boolean;
      /** @description The source of the field options. `null` for static options or field types that do not support options. */
      optionSource?:
        | components["schemas"]["SubmissionContentFieldOptionSource"]
        | null;
      /** @description The options of the field. */
      options?: components["schemas"]["CreateFieldOption"][];
    };
    UpdateFormFieldWithId: {
      /**
       * @description The internal name of the field
       * @example fullName
       */
      name?: string;
      /**
       * @description The label of the form field.
       * @example Full Name
       */
      label?: string | null;
      /** @description A description to describe the purpose of the field. */
      description?: string | null;
      /**
       * @description Whether the field is required for a campaign entry.
       * @example true
       */
      required?: boolean;
      /**
       * @description Whether the field must be unique across campaign entries.
       * @example true
       */
      unique?: boolean;
      /**
       * @description Whether the field must be verified. Requires field type to support verification.
       * @example true
       */
      verify?: boolean;
      /**
       * @description The order of the field in the form.
       * @example 1
       */
      order?: number;
      /**
       * @description The accepted content types of the field.
       * @example [
       *       "image/png",
       *       "image/jpeg"
       *     ]
       */
      acceptedMimeTypes?: (
        | "image/jpg"
        | "image/jpeg"
        | "image/png"
        | "image/gif"
        | "image/webp"
        | "image/svg+xml"
        | "video/mp4"
        | "video/webm"
        | "video/quicktime"
        | "video/ogg"
        | "text/plain"
        | "text/html"
        | "audio/mpeg"
        | "audio/wav"
        | "audio/ogg"
        | "audio/aac"
        | "audio/webm"
      )[];
      /**
       * @description Whether the field allows multiple options to be selected.
       * @example true
       */
      multipleOptions?: boolean;
      /** @description The source of the field options. `null` for static options or field types that do not support options. */
      optionSource?:
        | components["schemas"]["SubmissionContentFieldOptionSource"]
        | null;
      /** @description The options of the field. */
      options?: components["schemas"]["CreateFieldOption"][];
      /** @description The ID of the form field to update */
      id: string;
    };
    BulkUpdateFormFields: {
      /** @description The fields to update */
      fields: components["schemas"]["UpdateFormFieldWithId"][];
    };
    BulkUpdateFormFieldsResponse: {
      /** @description The fields that were updated */
      updated: components["schemas"]["FormField"][];
      /** @description Any errors that occurred during the update */
      errors: string[];
    };
    BulkDeleteFormFields: {
      /** @description The IDs of the fields to delete */
      fieldIds: string[];
    };
    BulkDeleteFormFieldsResponse: {
      /** @description The number of fields that were deleted successfully */
      deleteCount: number;
      /** @description Any errors that occurred during the deletion */
      errors: string[];
    };
    CreateSubmission: {
      /**
       * @description The fields to submit with the content. Must match the fields required by the form.
       * @example {
       *       "fullName": "John Doe",
       *       "email": "john.doe@example.com"
       *     }
       */
      fields?: {
        [key: string]: unknown;
      };
      /**
       * @description Verification tokens to assign to fields that require verification.
       * @example {
       *       "email": "a_special_token"
       *     }
       */
      verify?: {
        [key: string]: unknown;
      };
      /**
       * @description Whether to validate the form fields without saving the submission.
       * @example false
       */
      validateOnly?: boolean;
    };
    FormSubmissionResponse: {
      /**
       * @description Uploads created for content fields, where the key is the form field name.
       * @example {
       *       "field1": {
       *         "status": "READY",
       *         "url": "https://storage.example.com/upload/abcdefghijklmnopqrst",
       *         "expiresIn": 3600,
       *         "id": "abcdefghijklmnopqrst",
       *         "type": "video/mp4"
       *       },
       *       "field2": {
       *         "status": "READY",
       *         "url": "https://storage.example.com/upload/abcdefghijklmnopqrst",
       *         "expiresIn": 3600,
       *         "id": "abcdefghijklmnopqrst",
       *         "type": "video/mp4"
       *       }
       *     }
       */
      uploads: {
        [key: string]: components["schemas"]["ContentUpload"];
      };
    };
    BulkDeleteSubmissions: {
      /** @description The IDs of the submissions to delete */
      submissionIds: string[];
    };
    BulkDeleteResponse: {
      /** @description The number of items that were deleted successfully */
      deleteCount: number;
      /** @description Any errors that occurred during the deletion */
      errors: string[];
    };
    FieldValue: {
      /**
       * @description The type of the field
       * @example SELECT
       * @enum {string}
       */
      type: "CONTENT" | "BOOLEAN" | "EMAIL" | "NUMBER" | "SELECT" | "TEXT";
      /**
       * @description The value of the field
       * @example M
       */
      value: string | number | boolean;
      /**
       * @description The name of the field
       * @example shirtSize
       */
      name: string;
      /** @description The content of the field value if the field type is `CONTENT`, otherwise `null` */
      content: components["schemas"]["Content"] | null;
    };
    FormSubmission: {
      /**
       * @description The status of the submission
       * @enum {string}
       */
      status: "PENDING_REVIEW" | "READY" | "REJECTED";
      /**
       * @description The ID of the submission
       * @example f3u2u2fsism74hfuosf
       */
      id: string;
      /**
       * Format: date-time
       * @description The date the submission was created
       */
      createdAt: string;
      /** @description The form values of the submission */
      fieldValues: components["schemas"]["FieldValue"][];
    };
    ListSubmissionsResponse: {
      data: components["schemas"]["FormSubmission"][];
      metadata: {
        pageSize: number;
        nextCursor: string | null;
        nextLink: string | null;
      };
    };
    AuditLog: {
      /**
       * @description The type of action that was performed
       * @enum {string}
       */
      action: "CREATE" | "UPDATE" | "DELETE" | "REVIEW" | "SCHEDULE";
      /** @description The user that performed the action */
      actor: components["schemas"]["OrgUser"] | null;
      /** @description The data associated with the action */
      data: {
        [key: string]: unknown;
      } | null;
      /**
       * @description The type of resource that was affected
       * @enum {string}
       */
      resourceType:
        | "ORG"
        | "CAMPAIGN"
        | "CAMPAIGN_CONTENT"
        | "CONTENT"
        | "FIELD_TEMPlATE"
        | "FORM_SUBMISSION"
        | "FORM_TERMS"
        | "API_KEY"
        | "DATA_EXPORT";
      /** @description The id of the log */
      id: string;
      /**
       * Format: date-time
       * @description The date and time the action was performed
       */
      createdAt: string;
      /** @description The id of the resource that was affected */
      resourceId: string;
    };
    ListAuditLogsResponse: {
      /** @description The log list */
      data: components["schemas"]["AuditLog"][];
      metadata: {
        pageSize: number;
        nextCursor: string | null;
        nextLink: string | null;
      };
    };
    SubmissionReview: {
      /**
       * @description The action to take on the submission.
       * @enum {string}
       */
      action: "APPROVE" | "REJECT" | "REJECT_AND_DELETE";
      /**
       * @description Additional notes to add context to the review decision.
       * @example Submission contains incorrect information
       */
      notes?: string;
    };
    OrgMembership: {
      /**
       * @description The user's role in the org
       * @example OWNER
       * @enum {string}
       */
      role: "OWNER" | "ADMIN" | "MANAGER";
      /**
       * @description Unique identifier of the org
       * @example abcdefghijklmnopqrst
       */
      id: string;
      /**
       * @description Name of the org
       * @example acme-co
       */
      name: string;
      /**
       * @description Whether the org is a personal one
       * @example true
       */
      personal: boolean;
      /**
       * Format: date-time
       * @description When the org was created
       * @example 2024-01-01T00:00:00.000Z
       */
      createdAt: string;
    };
    Me: {
      /**
       * @description Unique identifier of the user
       * @example abcdefghijklmnopqrst
       */
      id: string;
      /**
       * @description The user's display name
       * @example John Doe
       */
      name: string;
      /**
       * @description The user's email
       * @example john.doe@example.com
       */
      email: string | null;
      /**
       * @description The user's photo
       * @example https://example.com/photo.jpg
       */
      image: string | null;
      /** @description The orgs the user is a member of */
      orgs: components["schemas"]["OrgMembership"][];
    };
    ListTags: {
      /** @description The list of tags */
      data: components["schemas"]["Tag"][];
      metadata: {
        pageSize: number;
        nextCursor: string | null;
        nextLink: string | null;
      };
    };
    CreateVerificationToken: {
      /**
       * @description The data required to create a verification token.
       * @example {
       *       "email": "sal@example.com"
       *     }
       */
      payload: {
        [key: string]: unknown;
      };
    };
    CreateVerificationTokenResponse: {
      /** @description The ID of the token */
      id: string;
      /**
       * Format: date-time
       * @description The date the token expires
       */
      expiresAt: string;
      /** @description When a new token can be requested in seconds */
      resendIn: number;
    };
    VerifyToken: {
      /** @description The code used to verify the token */
      code: string;
    };
    VerificationToken: {
      /** @description The token generated from a successful verify call. */
      token: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  CampaignController_listCampaigns_v1: {
    parameters: {
      query?: {
        /** @description The number of items per page. */
        pageSize?: number;
        /** @description The cursor to the next page. */
        cursor?: string;
      };
      header?: never;
      path: {
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListCampaignsResponse"];
        };
      };
      /** @description Organization not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  CampaignController_createCampaign_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateCampaign"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Campaign"];
        };
      };
      /** @description Organization not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  CampaignController_getCampaign_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Campaign"];
        };
      };
      /** @description Campaign not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  CampaignController_deleteCampaign_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Campaign not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  CampaignController_updateCampaign_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateCampaign"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Campaign"];
        };
      };
      /** @description Campaign not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  CampaignController_scheduleCampaign_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScheduleCampaign"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Campaign"];
        };
      };
      /** @description Campaign not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  CampaignController_updateCampaignStatus_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateCampaignStatus"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Campaign not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  CampaignController_updateCampaignTags_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateCampaignTags"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Campaign"];
        };
      };
      /** @description Campaign not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  ContentController_listContentByOrgId_v1: {
    parameters: {
      query?: {
        /** @description The number of items per page. */
        pageSize?: number;
        /** @description The cursor to the next page. */
        cursor?: string;
      };
      header?: never;
      path: {
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListContentResponse"];
        };
      };
      /** @description Organization not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  ContentController_createContent_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOrgContent"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ContentUpload"];
        };
      };
      /** @description Organization not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  ContentController_getContent_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Content"];
        };
      };
      /** @description Content not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  ContentController_deleteContent_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteContent"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Content not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  ContentController_setContentTags_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetContentTags"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Content not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  FormController_listForms_v1: {
    parameters: {
      query?: {
        /** @description The number of items per page. */
        pageSize?: number;
        /** @description The cursor to the next page. */
        cursor?: string;
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListFormsResponse"];
        };
      };
      /** @description Campaign not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  FormController_createForm_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateForm"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Form"];
        };
      };
      /** @description Campaign not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  FormController_getForm_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Form"];
        };
      };
      /** @description Form not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  FormController_deleteForm_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Form not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  FormController_updateForm_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateForm"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Form"];
        };
      };
      /** @description Form not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  FormController_createField_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateFormField"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FormField"];
        };
      };
      /** @description Form not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  FormController_aggregateFields_v1: {
    parameters: {
      query?: {
        /** @description The number of items per page. */
        pageSize?: number;
        /** @description The cursor to the next page. */
        cursor?: string;
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FormAggregateResponse"];
        };
      };
      /** @description Form not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  FormController_bulkCreateFields_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BulkCreateFormFields"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BulkCreateFormFieldsResponse"];
        };
      };
      /** @description Form not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  FormController_deleteField_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Form field not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  FormController_updateField_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateFormField"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FormField"];
        };
      };
      /** @description Form field not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  FormController_bulkUpdateFields_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BulkUpdateFormFields"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BulkUpdateFormFieldsResponse"];
        };
      };
      /** @description Form field not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  FormController_bulkDeleteFields_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BulkDeleteFormFields"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BulkDeleteFormFieldsResponse"];
        };
      };
      /** @description Form field not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  FormSubmissionController_listSubmissions_v1: {
    parameters: {
      query?: {
        /** @description The number of items per page. */
        pageSize?: number;
        /** @description A sort string to order the submissions. Prefix with "field:" to sort by a form field, otherwise it will be interpreted as a built-in field. */
        sort?: string;
        /** @description A query string to search and filter submissions. */
        search?: string;
        /** @description The cursor to the next page. */
        cursor?: string;
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListSubmissionsResponse"];
        };
      };
      /** @description Form not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  FormSubmissionController_createSubmission_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSubmission"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FormSubmissionResponse"];
        };
      };
      /** @description Campaign not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  FormSubmissionController_deleteSubmission_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Form submission not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  FormSubmissionController_bulkDeleteSubmissions_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BulkDeleteSubmissions"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BulkDeleteResponse"];
        };
      };
    };
  };
  FormSubmissionController_listSubmissionLogs_v1: {
    parameters: {
      query?: {
        /** @description The number of items per page. */
        pageSize?: number;
        /** @description The cursor to the next page. */
        cursor?: string;
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListAuditLogsResponse"];
        };
      };
      /** @description Form not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  FormSubmissionController_reviewSubmission_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmissionReview"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Form submission not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  MeController_getMe_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Me"];
        };
      };
    };
  };
  OrgController_listTags_v1: {
    parameters: {
      query?: {
        /** @description The number of items per page. */
        pageSize?: number;
        /** @description The tag to search for */
        search?: string;
        /** @description The cursor to the next page. */
        cursor?: string;
      };
      header?: never;
      path: {
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListTags"];
        };
      };
      /** @description Organization not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  VerificationController_createTokenForCampaignEntry_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateVerificationToken"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreateVerificationTokenResponse"];
        };
      };
      /** @description Organization not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
  VerificationController_verifyToken_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyToken"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["VerificationToken"];
        };
      };
      /** @description Something went wrong with the verification process */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error?: {
              code?: string;
              messages?: string[];
            };
          };
        };
      };
    };
  };
}
